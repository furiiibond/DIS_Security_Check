
class Vulnerability:
    def __init__(self, commadeProcessor, document):
        self.commadeProcessor = commadeProcessor
        self.pingResults = []
        self.portsOuverts = []
        self.scanResults = []
        while self.init() == True:
            pass
        self.toDocument(document)

    def init(self):
        print("-------------------------------------------------")
        print("Test de vulnérabilité")
        print("1. Ping")
        print("2. Ports ouverts")
        print("3. Scan de vulnérabilité")
        print("4. Sauvguarde et retour au menu principal")
        choix = input("Votre choix : ")
        if choix == "1":
            self.ping(input("Saisisez l'adresse de la machine à ping => "))
            return True
        elif choix == "2":
            self.getOpenPorts(input("Saisisez l'adresse de la machine à scanner => "))
            return True
        elif choix == "3":
            self.nmapVul(input("Saisisez l'adresse de la machine à scanner => "))
            return True
        elif choix == "4":
            return False

    def ping(self, ipv4):
        self.pingResults.append(ping(self.commadeProcessor, ipv4))

    def getOpenPorts(self, ipv4):
        self.portsOuverts.append(getOpenPorts(self.commadeProcessor, ipv4))

    def nmapVul(self, ipv4):
        self.scanResults.append(nmapVul(self.commadeProcessor, ipv4))

    def toDocument(self, document):
        for pingResult in self.pingResults:
            document.addCode("Ping", pingResult)
        for portsOuvert in self.portsOuverts:
            document.addCode("Ports ouverts", portsOuvert)
        for scanResult in self.scanResults:
            document.addCode("Scan de Vulnérabilité", scanResult)
            document.writeSumary(scanResult)


def getOpenPorts(commadeProcessor ,ipv4):
    commande = 'nmap -sV' + ipv4
    return commadeProcessor.execute(commande)

def ping(commadeProcessor, ipv4):
    print("Ping de " + ipv4)
    commande = 'ping -c 4 ' + ipv4
    return commadeProcessor.execute(commande)

def getNetbiosName(commadeProcessor, ipv4):
    commande = 'sudo nmap -sU --script nbstat.nse -p137 ' + ipv4
    return commadeProcessor.execute(commande)

def nmapVul(commadeProcessor, ipv4):
    print("Scan de vulnérabilité")
    print("Cette opération peut prendre plusieurs minutes (environ 10 minutes)")
    continueExecution = input("Voullez-vous continuer ? (y/n)")
    if continueExecution == "y":
        commande = 'nmap -Pn --script vuln ' + ipv4
        print("Scan en cours...")
        return commadeProcessor.execute(commande)
    else:
        print("Scan annulé")
        return "Scan de vulnérabilité annulé"

def scanSumary(ipv4, result):
    if "State: VULNERABLE" in result:
        return "L'équipement d'adresse réseau " + ipv4 + " est vulnérable"
    elif "State: LIKELY VULNERABLE" in result:
        return "L'équipement d'adresse réseau " + ipv4 + " est potentiellement vulnérable"
    else:
        return "L'équipement d'adresse réseau " + ipv4 + " ne semble pas vulnerable as des attaques déjà connue"