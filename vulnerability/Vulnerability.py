from utils import getAllHostsOnNetwork

cmd_scan_vuln = "nmap -Pn --script vuln "

class Vulnerability:
    def __init__(self, commadeProcessor, document):
        self.commadeProcessor = commadeProcessor
        self.cmd_scan_vuln = cmd_scan_vuln
        self.pingResults = []
        self.portsOuverts = []
        self.scanResults = []
        while self.init() == True:
            pass
        self.toDocument(document)

    def init(self):
        print("\n-----------------[2] Analyse de faille de sécurité-----------------\n")
        print("1. Ping\n")
        print("2. Ports ouverts\n")
        print("3. Scan de vulnérabilité")
        print("4. Sauvguarde et retour au menu principal")
        choix = input("Votre choix : ")
        inputText = "\nSaisisez l'adresse de la machine ou du réseau [192.168.0.1 ou 192.168.0.*]=> "
        if choix == "1":
            self.ping(input(inputText))
            return True
        elif choix == "2":
            self.getOpenPorts(input(inputText))
            return True
        elif choix == "3":
            self.nmapVul(input(inputText))
            return True
        elif choix == "4":
            return False

    def ping(self, ipv4):
        self.pingResults.append(ping(self.commadeProcessor, ipv4))

    def getOpenPorts(self, ipv4):
        self.portsOuverts.append(getOpenPorts(self.commadeProcessor, ipv4))

    def nmapVul(self, ipv4):
        print("Scan de vulnérabilité")
        print("Cette opération peut prendre plusieurs minutes (environ 10 minutes)")
        continueExecution = input("Voullez-vous continuer ? (y/n)")
        if continueExecution == "y" or continueExecution == "Y":
            if "*" or "-" in ipv4: # if ipv4 is a network
                for host in getAllHostsOnNetwork(ipv4):
                    self.scanResults.append(self.commadeProcessor.execute(self.cmd_scan_vuln + host, False, True))
            else: # if ipv4 is a host
                self.scanResults.append(self.commadeProcessor.execute(self.cmd_scan_vuln + ipv4, False, True))
        else:
            print("Scan annulé")
            return "Scan de vulnérabilité annulé"

    def toDocument(self, document):
        for pingResult in self.pingResults:
            document.addCode("Ping", pingResult)
        for portsOuvert in self.portsOuverts:
            document.addCode("Ports ouverts", portsOuvert)
        for scanResult in self.scanResults:
            document.addCode("Scan de Vulnérabilité", scanResult)
            document.writeSumary(scanResult)


def getOpenPorts(commadeProcessor ,ipv4):
    commande = 'nmap -sV ' + ipv4
    return commadeProcessor.execute(commande)

def ping(commadeProcessor, ipv4):
    print("Ping de " + ipv4)
    commande = 'ping -c 4 ' + ipv4
    return commadeProcessor.execute(commande)

def scanSumary(ipv4, result):
    if "State: VULNERABLE" in result:
        return "L'équipement d'adresse réseau " + ipv4 + " est vulnérable"
    elif "State: LIKELY VULNERABLE" in result:
        return "L'équipement d'adresse réseau " + ipv4 + " est potentiellement vulnérable"
    else:
        return "L'équipement d'adresse réseau " + ipv4 + " ne semble pas vulnerable as des attaques déjà connue"